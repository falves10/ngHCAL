# any line STARTING with '#' is a comment

# start each definition with <start_definition> and end with <end_definition>, each on it's own line
# every definition requires a name and type at minimum

# blocks must be declared AFTER name and type

# to fill a histogram, use the <fill> tag followed by the arguments to ->Fill()
      # example: <fill> (nTS, adc);

###########################################
<start_definition>
name = "General"
type = null

loop_vars = <start_block>
  int adcped = 3;
  float qped = adc2fC_QIE10_refl[ adcped ];
<end_block>

loop = <start_block>
  prevars.adcped = prevars.adcped;
  prevars.qped = prevars.qped;
  int tTS = digis.samples();
  tTS = tTS;
  int adc = digis[nTS].adc();
  adc = adc;
  int le_tdc = digis[nTS].le_tdc();
  le_tdc = le_tdc;
  int te_tdc = digis[nTS].te_tdc();
  te_tdc = te_tdc;
  int capid = digis[nTS].capid();
  capid = capid;
  int soi = digis[nTS].soi();
  soi = soi;
  float charge = adc2fC_QIE10_refl[ adc ] + 14.45;
  charge = charge;
  float acharge = charge - prevars.qped;
  acharge = acharge;
<end_block>

<end_definition>
###########################################
<start_suite>
name = "CapIDtesting"
code = 1
null = "General"
TH1F_perEV = "CapIDrot_EV" , "CapAllign_EV"
TH1F_perCH = "CapIDrot_CH" , "CapAllign_CH"
TH2F_perCH = "CIDvsTS", "BadData_CH"
<end_suite>
###########################################
<start_definition>
name = "CIDvsTS"
type = TH2F_perCH
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 4
lowy = -0.5
highy = 3.5
titley = "CID"

loop = <start_block>
  <fill_perCH> ( nTS, capid );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "CapIDrot_CH"
type = TH1F_perCH
nbinsx = 7
lowx = -3.5
highx = 3.5
titlex = "CID(N) - (CID(N-1)+1)%4"

loop = <start_block>  
  if (nTS != 0) {
    <fill_perCH> (capid - (digis[nTS-1].capid()+1)%4 );
  }
<end_block>

<end_definition>
##########################################
<start_definition>
name = "BadData_CH"
type = logger
log_file = "../log/bad_data.log"

loop_vars = <start_block>
  bool bad_flag;
<end_block>

pre_loop = <start_block>
  DetId detid_loc = digis.detid();
  HcalDetId hcaldetid_loc = HcalDetId(detid_loc);
  int iEta_loc = hcaldetid_loc.ieta();
  int iPhi_loc = hcaldetid_loc.iphi();
  int Depth_loc = hcaldetid_loc.depth();

  prevars.bad_flag = 0;
  bool zero_event_flag = 1;
  for (int iTS=1 ; iTS<10 ; iTS++) { 
    if ( (digis[iTS].capid() - (digis[iTS-1].capid()+1)%4) != 0 ) {
      prevars.bad_flag = 1;
    }
    if (digis[iTS].capid() != 0) {
      zero_event_flag = 0;
    }
  }
  if (zero_event_flag == 1){
    prevars.bad_flag = 0;
  }
  if (prevars.bad_flag == 1) {
     <log> "#############" << endl;
     <log> "# BAD EVENT" << endl;
     <log> "# HF: " << Depth_loc << endl;
     <log> "# Slot: " << iPhi_loc << endl;
     <log> "# QIE: " << iEta_loc << endl;
     <log> "# nEV:" << _event_num << endl;
     <log> "#############" << endl;
    for (int iTS=0 ; iTS<10 ; iTS++) {
      if (( (digis[iTS].capid() - (digis[iTS-1].capid()+1)%4) != 0 ) && ( iTS != 0 )) {
         <log> "TS:" << iTS << "  --  CID " << digis[iTS].capid() << "  --  ADC " << digis[iTS].adc() << "  --  leTDC " << digis[iTS].le_tdc() << "  --  teTDC " << digis[iTS].te_tdc() << "  <<<<<<<<" << endl;
      }
      else {
         <log> "TS:" << iTS << "  --  CID " << digis[iTS].capid() << "  --  ADC " << digis[iTS].adc() << "  --  leTDC " << digis[iTS].le_tdc() << "  --  teTDC " << digis[iTS].te_tdc() << endl;
      }
    }
     <log> "#############" << endl;
  }
<end_block>

<end_definition>
##########################################
<start_definition>
name = "CapIDrot_EV"
type = TH1F_perEV
nbinsx = 7
lowx = -3.5
highx = 3.5
titlex = "CID(N) - (CID(N-1)+1)%4"

loop = <start_block>  
  if (nTS != 0) {
    <fill_perEV> (capid - (digis[nTS-1].capid()+1)%4 );
  }
<end_block>

<end_definition>
##########################################
<start_definition>
name = "CapAllign_CH"
type = TH1F_perCH
nbinsx = 7
lowx = -3.5
highx = 3.5
titlex = "CID - CID(ch0)"

loop_vars = <start_block>
  int* ch0_cid_ch = new int[10];
<end_block>

loop = <start_block>   
  if (nCH == 0) {
    prevars.ch0_cid_ch[nTS] = digis[nTS].capid();
  }
  <fill_perCH> (capid - prevars.ch0_cid_ch[nTS]);
<end_block>

<end_definition>
##########################################
<start_definition>
name = "CapAllign_EV"
type = TH1F_perEV
nbinsx = 7
lowx = -3.5
highx = 3.5
titlex = "CID - CID(ch0)"

loop_vars = <start_block>
  int* ch0_cid_ev = new int[10];
<end_block>

loop = <start_block>   
  if (nCH == 0) {
    prevars.ch0_cid_ev[nTS] = digis[nTS].capid();
  }
  <fill_perEV> (capid - prevars.ch0_cid_ev[nTS]);
<end_block>

<end_definition>
##########################################
<start_suite>
name = "PedestalData"
code = 2
null = "General"
TH1F_perEV = "QSum_ped_EV" , "ADC_ped_EV" , "Qav_ped_EV"
TH1F_perCH = "QSum_ped_CH" , "ADC_ped_CH"
TH2F_perEV = "ADCvsTS_ped_EV" , "Qav_ped_CID" , "ADC_ped_CID"
TH2F_perCH = "ADCvsTS_ped_CH" 
<end_suite>
###########################################
<start_definition>
name = "ADC_ped_EV"
type = TH1F_perEV
nbinsx = 25
lowx = 0
highx = 50
titlex = "ADC"

loop = <start_block>
  <fill_perEV> ( adc );
<end_block>

<end_definition>
###########################################
<start_definition>
name = "ADC_ped_CH"
type = TH1F_perCH
nbinsx = 25
lowx = 0
highx = 50
titlex = "ADC"

loop = <start_block>
  <fill_perCH> ( adc );
<end_block>

<end_definition>
###########################################
<start_definition>
name = "ADCvsTS_ped_CH"
type = TH2F_perCH
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 25
lowy = 0
highy = 50
titley = "ADC"

loop = <start_block>
  <fill_perCH> ( nTS, adc );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "ADCvsTS_ped_EV"
type = TH2F_perEV
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 25
lowy = 0
highy = 50
titley = "ADC"

loop = <start_block>
  <fill_perEV> ( nTS, adc );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "QSum_ped_EV"
type = TH1F_perEV
nbinsx = 50
lowx = 0
highx = 500
titlex = "Integrated Charge (fC)"

loop_vars = <start_block>
  float qsum_ped_EV;
<end_block>

pre_loop = <start_block>
  prevars.qsum_ped_EV = 0;
<end_block>

loop = <start_block>
  prevars.qsum_ped_EV += (charge - prevars.qped);
<end_block>

post_loop = <start_block>
  <fill_perEV> ( prevars.qsum_ped_EV );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "QSum_ped_CH"
type = TH1F_perCH
nbinsx = 50
lowx = 0
highx = 500
titlex = "Integrated Charge (fC)"

loop_vars = <start_block>
  float qsum_ped_CH;
<end_block>

pre_loop = <start_block>
  prevars.qsum_ped_CH = 0;
<end_block>

loop = <start_block>
  prevars.qsum_ped_CH += (charge - prevars.qped);
<end_block>

post_loop = <start_block>
  <fill_perCH> ( prevars.qsum_ped_CH );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "Qav_ped_EV"
type = TH1F_perEV
nbinsx = 50
lowx = 0
highx = 50
titlex = "Q (fC)"

loop_vars = <start_block>
  float qav_ped_EV;
<end_block>

pre_loop = <start_block>
  prevars.qav_ped_EV = 0;
<end_block>

loop = <start_block>
  prevars.qav_ped_EV += (charge - prevars.qped);
<end_block>

post_loop = <start_block>
  <fill_perEV> ( prevars.qsum_ped_EV / float(digis.samples()) );
<end_block>

<end_definition>
###########################################
<start_definition>
name = "Qav_ped_CID"
type = TH2F_perEV
nbinsx = 4
lowx = -0.5
highx = 3.5
titlex = "CID"
nbinsy = 50
lowy = 0
highy = 15
titley = "Q (fC)"

loop_vars = <start_block>
  float* qav_ped_CID = new float[4];
  int* cid_count  = new int[4];
<end_block>

pre_loop = <start_block>
  for (int jj=0 ; jj < 4; jj++){
    prevars.qav_ped_CID[jj] = 0;
    prevars.cid_count[jj] = 0;	
  }   
<end_block>

loop = <start_block>
  prevars.qav_ped_CID[capid] += (charge - prevars.qped);
  prevars.cid_count[capid] += 1;
<end_block>

post_loop = <start_block>
  for (int jj=0 ; jj < 4; jj++){
    <fill_perEV> ( jj , (prevars.qav_ped_CID[jj] / prevars.cid_count[jj]) );
  }   
<end_block>

<end_definition>
###########################################
<start_definition>
name = "ADC_ped_CID"
type = TH2F_perEV
nbinsx = 4
lowx = -0.5
highx = 3.5
titlex = "CID"
nbinsy = 25
lowy = 0
highy = 50
titley = "ADC"

loop = <start_block>
  <fill_perEV> ( capid , adc );
<end_block>

<end_definition>
###########################################
<start_suite>
name = "AbsoluteTiming"
code = 3
null = "General"
TH1F_perEV = "T_abs_EV"
TH1F_perCH = "T_abs_CH"
TH2F_perEV = "QvsTS_EV" , "TDCvsTS_EV"
TH2F_perCH = "QvsTS_CH" , "TDCvsTS_CH"
<end_suite>
###########################################
<start_definition>
name = "T_abs_EV"
type = TH1F_perEV
nbinsx = 250
lowx = -0.5
highx = 249.5
titlex = "t (ns)"

loop_vars = <start_block>
  bool first_tdc_EV;
<end_block>

pre_loop = <start_block>
  prevars.first_tdc_EV = 1;
<end_block>

loop = <start_block>
  if ((prevars.first_tdc_EV == 1) && (le_tdc < 50)) {
    prevars.first_tdc_EV = 0;
    float t_abs = ((nTS-1)*25.0) + (le_tdc*0.5);
    <fill_perEV> (t_abs);
  }
<end_block>

<end_definition>
###########################################
<start_definition>
name = "T_abs_CH"
type = TH1F_perCH
nbinsx = 250
lowx = -0.5
highx = 249.5
titlex = "t (ns)"

loop_vars = <start_block>
  bool first_tdc_CH;
<end_block>

pre_loop = <start_block>
  prevars.first_tdc_CH = 1;
<end_block>

loop = <start_block>
  if ((prevars.first_tdc_CH == 1) && (le_tdc < 50)) {
    prevars.first_tdc_CH = 0;
    float t_abs = (nTS*25.0) + (le_tdc*0.5);
    <fill_perCH> (t_abs);
  }
<end_block>

<end_definition>
###########################################
<start_definition>
name = "TDCvsTS_CH"
type = TH2F_perCH
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 50
lowy = -0.5
highy = 49.5
titley = "TDC (0.5 ns)"

loop = <start_block>
  <fill_perCH> ( nTS, le_tdc );
<end_block>

<end_definition>
##########################################
<start_definition>
name = "TDCvsTS_EV"
type = TH2F_perEV
nbinsx = tTS
lowx = -0.5
highx = (float)tTS - (float)0.5
titlex = "TS"
nbinsy = 50
lowy = -0.5
highy = 49.5
titley = "TDC (0.5 ns)"

loop = <start_block>
  <fill_perEV> ( nTS, le_tdc );
<end_block>

<end_definition>
##########################################
<start_suite>
name = "PhaseSampler"
code = 4
null = "General"
TH2F_perCH = "ADCvsEV_CH"
TH2F_perEV = "ADCvsEV_EV"
<end_suite>
###########################################
<start_definition>
name = "ADCvsEV_CH"
type = TH2F_perCH
nbinsx = 3300
lowx = -0.5
highx = 3299.5
titlex = "nEV"
nbinsy = 256
lowy = -0.5
highy = 255.5
titley = "avADC"

pre_loop = <start_block>
  int tTS = digis.samples();
  int ADCsum = 0;
  for (int loopTS=0 ; loopTS < tTS ; loopTS++) {
    ADCsum += digis[loopTS].adc();
  }
  float avADC = (float)ADCsum / (float)tTS;
  if (_event_num < 3300) {
    <fill_perCH> ( _event_num, avADC );
  }
<end_block>

<end_definition>
##########################################
<start_definition>
name = "ADCvsEV_EV"
type = TH2F_perEV
nbinsx = 3300
lowx = -0.5
highx = 3299.5
titlex = "nEV"
nbinsy = 256
lowy = -0.5
highy = 255.5
titley = "avADC"

pre_loop = <start_block>
  int tTS_EV = digis.samples();
  int ADCsum_EV = 0;
  for (int loopTS=0 ; loopTS < tTS_EV ; loopTS++) {
    ADCsum_EV += digis[loopTS].adc();
  }
  float avADC_EV = (float)ADCsum_EV / (float)tTS_EV;
  if (_event_num < 3300) {
    <fill_perEV> ( _event_num, avADC_EV );
  }
<end_block>

<end_definition>
##########################################
